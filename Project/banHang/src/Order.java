import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Order {
    private String orderId;
    private String customerId; 
    private String productId;
    private int quantity;
    private double totalPrice;
    private String orderDate;
    private String status;

    // Danh s√°ch ƒë∆°n h√†ng
    private static List<Order> orderList = new ArrayList<>();

    public Order(String orderId, String customerId, String productId, int quantity, double totalPrice, String orderDate, String status) {
        this.orderId = orderId;
        this.customerId = customerId;
        this.productId = productId;
        this.quantity = quantity;
        this.totalPrice = totalPrice;
        this.orderDate = orderDate;
        this.status = status;
    }

    // Th√™m ƒë∆°n h√†ng m·ªõi
    public static void addOrder(Order order) {
        try {
            if (order == null || order.customerId == null || order.customerId.isEmpty()) {
                throw new IllegalArgumentException("M√£ kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }
            if (order.productId == null || order.productId.isEmpty()) {
                throw new IllegalArgumentException("M√£ s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }
            if (order.quantity <= 0) {
                throw new IllegalArgumentException("S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0.");
            }
            orderList.add(order);
            System.out.println("‚úÖ ƒê√£ th√™m ƒë∆°n h√†ng: " + order.orderId);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi th√™m ƒë∆°n h√†ng: " + e.getMessage());
        }
    }

    // Hi·ªÉn th·ªã to√†n b·ªô ƒë∆°n h√†ng
    public static void displayAllOrders() {
        System.out.println("\n===== DANH S√ÅCH ƒê∆†N H√ÄNG =====");
        if (orderList.isEmpty()) {
            System.out.println("Hi·ªán ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.");
            return;
        }
        for (Order o : orderList) {
            o.displayOrderInfo();
            System.out.println("--------------------");
        }
    }

    // Hi·ªÉn th·ªã chi ti·∫øt ƒë∆°n h√†ng
    public void displayOrderInfo() {
        System.out.println("M√£ ƒë∆°n h√†ng: " + orderId);
        System.out.println("M√£ kh√°ch h√†ng: " + customerId);
        System.out.println("M√£ s·∫£n ph·∫©m: " + productId);
        System.out.println("S·ªë l∆∞·ª£ng: " + quantity);
        System.out.println("T·ªïng ti·ªÅn: " + totalPrice + " VND");
        System.out.println("Ng√†y ƒë·∫∑t: " + orderDate);
        System.out.println("Tr·∫°ng th√°i: " + status);
    }

    // C·∫≠p nh·∫≠t ƒë∆°n h√†ng
    public static void updateOrder(String orderId, String newCustomerId, String newProductId, Integer newQuantity, Double newTotalPrice, String newOrderDate, String newStatus) {
        try {
            boolean found = false;
            for (Order o : orderList) {
                if (o.orderId.equals(orderId)) {
                    if (newCustomerId != null && !newCustomerId.isEmpty()) o.customerId = newCustomerId;
                    if (newProductId != null && !newProductId.isEmpty()) o.productId = newProductId;
                    if (newQuantity != null && newQuantity > 0) o.quantity = newQuantity;
                    if (newTotalPrice != null && newTotalPrice > 0) o.totalPrice = newTotalPrice;
                    if (newOrderDate != null && !newOrderDate.isEmpty()) o.orderDate = newOrderDate;
                    if (newStatus != null && !newStatus.isEmpty()) o.status = newStatus;
                    System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n h√†ng: " + orderId);
                    found = true;
                    break;
                }
            }
            if (!found) {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng c√≥ ID: " + orderId);
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng: " + e.getMessage());
        }
    }

    // X√≥a ƒë∆°n h√†ng
    public static void deleteOrder(String orderId) {
        try {
            Iterator<Order> iterator = orderList.iterator();
            boolean found = false;
            while (iterator.hasNext()) {
                Order o = iterator.next();
                if (o.orderId.equals(orderId)) {
                    iterator.remove();
                    System.out.println("üóë ƒê√£ x√≥a ƒë∆°n h√†ng: " + o.orderId);
                    found = true;
                    break;
                }
            }
            if (!found) {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng ƒë·ªÉ x√≥a.");
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi x√≥a ƒë∆°n h√†ng: " + e.getMessage());
        }
    }

    public String getOrderId() {
        return orderId;
    }

    public String getCustomerId() {
        return customerId;
    }

    public String getProductId() {
        return productId;
    }

    public int getQuantity() {
        return quantity;
    }

    public double getTotalPrice() {
        return totalPrice;
    }

    public String getOrderDate() {
        return orderDate;
    }

    public String getStatus() {
        return status;
    }
}
