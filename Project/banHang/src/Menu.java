import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Menu {
    private String menuId;
    private String itemName;
    private double price;
    private String description;

    // Danh s√°ch c√°c m√≥n trong menu (static ƒë·ªÉ qu·∫£n l√Ω chung)
    private static List<Menu> menuList = new ArrayList<>();

    public Menu(String menuId, String itemName, double price, String description) {
        this.menuId = menuId;
        this.itemName = itemName;
        this.price = price;
        this.description = description;
    }

    // Th√™m m√≥n v√†o menu
    public static void addMenuItem(Menu menuItem) {
        try {
            if (menuItem == null || menuItem.itemName == null || menuItem.itemName.isEmpty()) {
                throw new IllegalArgumentException("T√™n m√≥n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }
            menuList.add(menuItem);
            System.out.println("‚úÖ ƒê√£ th√™m m√≥n: " + menuItem.itemName);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi th√™m m√≥n: " + e.getMessage());
        }
    }

    // Hi·ªÉn th·ªã to√†n b·ªô menu
    public static void displayMenu() {
        System.out.println("\n===== DANH S√ÅCH MENU =====");
        if (menuList.isEmpty()) {
            System.out.println("Menu hi·ªán ƒëang tr·ªëng.");
            return;
        }
        for (Menu m : menuList) {
            System.out.println("ID: " + m.menuId);
            System.out.println("T√™n m√≥n: " + m.itemName);
            System.out.println("Gi√°: " + m.price + " VND");
            System.out.println("M√¥ t·∫£: " + m.description);
            System.out.println("--------------------");
        }
    }

    // C·∫≠p nh·∫≠t th√¥ng tin m√≥n
    public static void updateMenuItem(String menuId, String newName, double newPrice, String newDesc) {
        try {
            boolean found = false;
            for (Menu m : menuList) {
                if (m.menuId.equals(menuId)) {
                    if (newName != null && !newName.isEmpty()) m.itemName = newName;
                    if (newPrice > 0) m.price = newPrice;
                    if (newDesc != null && !newDesc.isEmpty()) m.description = newDesc;
                    found = true;
                    System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t m√≥n: " + menuId);
                    break;
                }
            }
            if (!found) {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y m√≥n c√≥ ID: " + menuId);
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t m√≥n: " + e.getMessage());
        }
    }

    // X√≥a m√≥n kh·ªèi menu
    public static void deleteMenuItem(String menuId) {
        try {
            Iterator<Menu> iterator = menuList.iterator();
            boolean found = false;
            while (iterator.hasNext()) {
                Menu m = iterator.next();
                if (m.menuId.equals(menuId)) {
                    iterator.remove();
                    found = true;
                    System.out.println("üóë ƒê√£ x√≥a m√≥n: " + m.itemName);
                    break;
                }
            }
            if (!found) {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y m√≥n ƒë·ªÉ x√≥a.");
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi x√≥a m√≥n: " + e.getMessage());
        }
    }

    // Getter v√† Setter
    public String getMenuId() {
        return menuId;
    }

    public String getItemName() {
        return itemName;
    }

    public double getPrice() {
        return price;
    }

    public String getDescription() {
        return description;
    }
}
