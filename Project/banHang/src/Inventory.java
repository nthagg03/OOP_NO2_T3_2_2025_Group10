import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class Inventory {
    private String inventoryId;
    private String productId;
    private int currentStock;
    private int minStock;
    private int maxStock;
    private String location;

    // Danh s√°ch kho h√†ng
    private static List<Inventory> inventoryList = new ArrayList<>();

    public Inventory(String inventoryId, String productId, int currentStock, int minStock, int maxStock, String location) {
        this.inventoryId = inventoryId;
        this.productId = productId;
        this.currentStock = currentStock;
        this.minStock = minStock;
        this.maxStock = maxStock;
        this.location = location;
    }

    // Th√™m kho m·ªõi
    public static void addInventory(Inventory inventory) {
        try {
            if (inventory == null || inventory.productId == null || inventory.productId.isEmpty()) {
                throw new IllegalArgumentException("M√£ s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            }
            inventoryList.add(inventory);
            System.out.println("‚úÖ ƒê√£ th√™m kho: " + inventory.inventoryId);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi th√™m kho: " + e.getMessage());
        }
    }

    // Hi·ªÉn th·ªã to√†n b·ªô kho h√†ng
    public static void displayAllInventories() {
        System.out.println("\n===== DANH S√ÅCH KHO H√ÄNG =====");
        if (inventoryList.isEmpty()) {
            System.out.println("Kho h√†ng hi·ªán ƒëang tr·ªëng.");
            return;
        }
        for (Inventory inv : inventoryList) {
            inv.displayInventoryInfo();
            System.out.println("--------------------");
        }
    }

    // Hi·ªÉn th·ªã th√¥ng tin kho c·ª• th·ªÉ
    public void displayInventoryInfo() {
        System.out.println("M√£ kho: " + inventoryId);
        System.out.println("M√£ s·∫£n ph·∫©m: " + productId);
        System.out.println("S·ªë l∆∞·ª£ng t·ªìn: " + currentStock);
        System.out.println("T·ªìn t·ªëi thi·ªÉu: " + minStock);
        System.out.println("T·ªìn t·ªëi ƒëa: " + maxStock);
        System.out.println("V·ªã tr√≠ kho: " + location);
    }

    // C·∫≠p nh·∫≠t th√¥ng tin kho
    public static void updateInventory(String inventoryId, String newProductId, Integer newStock, Integer newMin, Integer newMax, String newLocation) {
        try {
            boolean found = false;
            for (Inventory inv : inventoryList) {
                if (inv.inventoryId.equals(inventoryId)) {
                    if (newProductId != null && !newProductId.isEmpty()) inv.productId = newProductId;
                    if (newStock != null && newStock >= 0) inv.currentStock = newStock;
                    if (newMin != null && newMin >= 0) inv.minStock = newMin;
                    if (newMax != null && newMax >= 0) inv.maxStock = newMax;
                    if (newLocation != null && !newLocation.isEmpty()) inv.location = newLocation;
                    System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t kho: " + inventoryId);
                    found = true;
                    break;
                }
            }
            if (!found) {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y kho c√≥ ID: " + inventoryId);
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t kho: " + e.getMessage());
        }
    }

    // X√≥a kho
    public static void deleteInventory(String inventoryId) {
        try {
            Iterator<Inventory> iterator = inventoryList.iterator();
            boolean found = false;
            while (iterator.hasNext()) {
                Inventory inv = iterator.next();
                if (inv.inventoryId.equals(inventoryId)) {
                    iterator.remove();
                    System.out.println("üóë ƒê√£ x√≥a kho: " + inv.inventoryId);
                    found = true;
                    break;
                }
            }
            if (!found) {
                System.out.println("‚ö† Kh√¥ng t√¨m th·∫•y kho ƒë·ªÉ x√≥a.");
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi x√≥a kho: " + e.getMessage());
        }
    }

    // C√°c ph∆∞∆°ng th·ª©c nghi·ªáp v·ª•
    public void importGoods(int quantity) {
        try {
            if (quantity <= 0) {
                throw new IllegalArgumentException("S·ªë l∆∞·ª£ng nh·∫≠p ph·∫£i l·ªõn h∆°n 0.");
            }
            currentStock += quantity;
            if (currentStock > maxStock) {
                System.out.println("‚ö† C·∫£nh b√°o: S·ªë l∆∞·ª£ng t·ªìn v∆∞·ª£t qu√° m·ª©c t·ªëi ƒëa!");
            }
            System.out.println("‚úÖ ƒê√£ nh·∫≠p " + quantity + " s·∫£n ph·∫©m. T·ªìn kho hi·ªán t·∫°i: " + currentStock);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi nh·∫≠p h√†ng: " + e.getMessage());
        }
    }

    public void exportGoods(int quantity) {
        try {
            if (quantity <= 0) {
                throw new IllegalArgumentException("S·ªë l∆∞·ª£ng xu·∫•t ph·∫£i l·ªõn h∆°n 0.");
            }
            if (quantity > currentStock) {
                throw new IllegalStateException("Kh√¥ng ƒë·ªß h√†ng trong kho ƒë·ªÉ xu·∫•t.");
            }
            currentStock -= quantity;
            System.out.println("‚úÖ ƒê√£ xu·∫•t " + quantity + " s·∫£n ph·∫©m. T·ªìn kho hi·ªán t·∫°i: " + currentStock);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi xu·∫•t h√†ng: " + e.getMessage());
        }
    }

    public void checkLowStock() {
        if (currentStock <= minStock) {
            System.out.println("‚ö† C·∫£nh b√°o: H√†ng t·ªìn ƒë√£ xu·ªëng d∆∞·ªõi m·ª©c t·ªëi thi·ªÉu!");
        } else {
            System.out.println("‚úÖ T·ªìn kho ·ªïn ƒë·ªãnh.");
        }
    }

    public String getInventoryId() {
        return inventoryId;
    }

    public String getProductId() {
        return productId;
    }

    public int getCurrentStock() {
        return currentStock;
    }

    public String getLocation() {
        return location;
    }
}
 